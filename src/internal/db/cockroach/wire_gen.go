// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cockroach

import (
	"context"
	"github.com/aquarius6666/citizen-v/src/internal/db/cockroach/user"
	user2 "github.com/aquarius6666/citizen-v/src/internal/db/user"
	"github.com/aquarius6666/go-utils/database/cockroach"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from server.cdb.wire.go:

func initServerCDBRepo(ctx context.Context, logger *logrus.Logger, opts ServerCDBOptions) (*ServerCDBRepo, error) {
	string2 := opts.Dsn
	config := opts.Cfg
	db, err := cockroach.NewCDBConnection(string2, config)
	if err != nil {
		return nil, err
	}
	cdbRepository := cockroach.InitCDBRepository(ctx, logger, db)
	userCDBRepo, err := user.InitUserCDBRepo(ctx, logger, db)
	if err != nil {
		return nil, err
	}
	serverCDBRepo := &ServerCDBRepo{
		CDBRepository: cdbRepository,
		UserRepo:      userCDBRepo,
	}
	return serverCDBRepo, nil
}

// server.cdb.wire.go:

type ServerCDBOptions struct {
	Cfg *gorm.Config
	Dsn string
}

func InitServerCDBRepo(ctx context.Context, logger *logrus.Logger, opts ServerCDBOptions) (*ServerCDBRepo, error) {
	s, err := initServerCDBRepo(ctx, logger, opts)
	if err != nil {
		return nil, err
	}
	s.SetInterfaces(&user2.User{})
	return s, nil
}
